name: Deploy to DigitalOcean with Docker Compose

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up SSH Agent to use the private key for deployment
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.DO_SSH_PRIVATE_KEY }}

      # Step 3: Set up Docker on the GitHub Actions runner
      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      # Step 4: Install Docker Compose
      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version  # Verify installation

      # Step 5: Deploy to Droplet using Docker Compose
      - name: Deploy to Droplet using Docker Compose
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.DO_SSH_USER }}@${{ secrets.DO_HOST }} << 'EOF'
            # Define the application directory on the Droplet
            APP_DIR="/opt/pythonapp"

            # Check if the application directory exists
            if [ ! -d "$APP_DIR" ]; then
              # If it doesn't exist, create it and clone the repository
              mkdir -p $APP_DIR
              git clone https://github.com/vivekr42/python-digitalocean-app.git $APP_DIR
            else
              # If it exists, navigate into it and pull the latest changes
              cd $APP_DIR
              git pull origin main
            fi

            # Ensure docker-compose.yml exists
            if [ ! -f "$APP_DIR/docker-compose.yml" ]; then
              echo "docker-compose.yml file not found, aborting deployment."
              exit 1
            fi

            # Navigate to the application directory
            cd $APP_DIR

            # Stop and remove any existing containers using Docker Compose
            docker-compose down || true

            # Build and start the app using Docker Compose
            docker-compose up -d --build

            # Display the running containers
            docker ps
          EOF
